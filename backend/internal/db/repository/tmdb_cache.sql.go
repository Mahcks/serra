// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: tmdb_cache.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const cleanupOldAPIUsage = `-- name: CleanupOldAPIUsage :exec
DELETE FROM tmdb_api_usage 
WHERE date < DATE('now', '-30 days')
`

func (q *Queries) CleanupOldAPIUsage(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupOldAPIUsage)
	return err
}

const deleteCacheByEndpoint = `-- name: DeleteCacheByEndpoint :exec
DELETE FROM tmdb_cache WHERE endpoint = ?
`

func (q *Queries) DeleteCacheByEndpoint(ctx context.Context, endpoint string) error {
	_, err := q.db.ExecContext(ctx, deleteCacheByEndpoint, endpoint)
	return err
}

const deleteCacheEntry = `-- name: DeleteCacheEntry :exec
DELETE FROM tmdb_cache WHERE cache_key = ?
`

func (q *Queries) DeleteCacheEntry(ctx context.Context, cacheKey string) error {
	_, err := q.db.ExecContext(ctx, deleteCacheEntry, cacheKey)
	return err
}

const deleteExpiredCache = `-- name: DeleteExpiredCache :exec
DELETE FROM tmdb_cache WHERE expires_at <= CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredCache(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredCache)
	return err
}

const getAPIUsageByEndpoint = `-- name: GetAPIUsageByEndpoint :many
SELECT endpoint, SUM(request_count) as total_requests
FROM tmdb_api_usage
WHERE date >= DATE('now', '-7 days')
GROUP BY endpoint
ORDER BY total_requests DESC
`

type GetAPIUsageByEndpointRow struct {
	Endpoint      string
	TotalRequests sql.NullFloat64
}

func (q *Queries) GetAPIUsageByEndpoint(ctx context.Context) ([]GetAPIUsageByEndpointRow, error) {
	rows, err := q.db.QueryContext(ctx, getAPIUsageByEndpoint)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAPIUsageByEndpointRow
	for rows.Next() {
		var i GetAPIUsageByEndpointRow
		if err := rows.Scan(&i.Endpoint, &i.TotalRequests); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAPIUsageToday = `-- name: GetAPIUsageToday :one
SELECT COALESCE(SUM(request_count), 0) as total_requests
FROM tmdb_api_usage
WHERE date = DATE('now')
`

func (q *Queries) GetAPIUsageToday(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, getAPIUsageToday)
	var total_requests interface{}
	err := row.Scan(&total_requests)
	return total_requests, err
}

const getAllStaticData = `-- name: GetAllStaticData :many
SELECT data_type, data, last_updated
FROM tmdb_static_data
ORDER BY data_type
`

func (q *Queries) GetAllStaticData(ctx context.Context) ([]TmdbStaticDatum, error) {
	rows, err := q.db.QueryContext(ctx, getAllStaticData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TmdbStaticDatum
	for rows.Next() {
		var i TmdbStaticDatum
		if err := rows.Scan(&i.DataType, &i.Data, &i.LastUpdated); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCacheByEndpoint = `-- name: GetCacheByEndpoint :many
SELECT cache_key, data, endpoint, expires_at, created_at, updated_at
FROM tmdb_cache
WHERE endpoint = ? AND expires_at > CURRENT_TIMESTAMP
ORDER BY created_at DESC
`

func (q *Queries) GetCacheByEndpoint(ctx context.Context, endpoint string) ([]TmdbCache, error) {
	rows, err := q.db.QueryContext(ctx, getCacheByEndpoint, endpoint)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TmdbCache
	for rows.Next() {
		var i TmdbCache
		if err := rows.Scan(
			&i.CacheKey,
			&i.Data,
			&i.Endpoint,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCacheEntry = `-- name: GetCacheEntry :one
SELECT cache_key, data, endpoint, expires_at, created_at, updated_at
FROM tmdb_cache
WHERE cache_key = ? AND expires_at > CURRENT_TIMESTAMP
`

func (q *Queries) GetCacheEntry(ctx context.Context, cacheKey string) (TmdbCache, error) {
	row := q.db.QueryRowContext(ctx, getCacheEntry, cacheKey)
	var i TmdbCache
	err := row.Scan(
		&i.CacheKey,
		&i.Data,
		&i.Endpoint,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCacheStats = `-- name: GetCacheStats :one
SELECT 
    COUNT(*) as total_entries,
    COUNT(CASE WHEN expires_at > CURRENT_TIMESTAMP THEN 1 END) as valid_entries,
    COUNT(CASE WHEN expires_at <= CURRENT_TIMESTAMP THEN 1 END) as expired_entries
FROM tmdb_cache
`

type GetCacheStatsRow struct {
	TotalEntries   int64
	ValidEntries   int64
	ExpiredEntries int64
}

func (q *Queries) GetCacheStats(ctx context.Context) (GetCacheStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getCacheStats)
	var i GetCacheStatsRow
	err := row.Scan(&i.TotalEntries, &i.ValidEntries, &i.ExpiredEntries)
	return i, err
}

const getStaticData = `-- name: GetStaticData :one
SELECT data_type, data, last_updated
FROM tmdb_static_data
WHERE data_type = ?
`

// Static Data Queries
func (q *Queries) GetStaticData(ctx context.Context, dataType string) (TmdbStaticDatum, error) {
	row := q.db.QueryRowContext(ctx, getStaticData, dataType)
	var i TmdbStaticDatum
	err := row.Scan(&i.DataType, &i.Data, &i.LastUpdated)
	return i, err
}

const incrementAPIUsage = `-- name: IncrementAPIUsage :exec
INSERT INTO tmdb_api_usage (endpoint, request_count, date)
VALUES (?, 1, DATE('now'))
ON CONFLICT(endpoint, date) 
DO UPDATE SET request_count = request_count + 1
`

// API Usage Tracking
func (q *Queries) IncrementAPIUsage(ctx context.Context, endpoint string) error {
	_, err := q.db.ExecContext(ctx, incrementAPIUsage, endpoint)
	return err
}

const setCacheEntry = `-- name: SetCacheEntry :exec
INSERT OR REPLACE INTO tmdb_cache (cache_key, data, endpoint, expires_at, updated_at)
VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
`

type SetCacheEntryParams struct {
	CacheKey  string
	Data      string
	Endpoint  string
	ExpiresAt time.Time
}

func (q *Queries) SetCacheEntry(ctx context.Context, arg SetCacheEntryParams) error {
	_, err := q.db.ExecContext(ctx, setCacheEntry,
		arg.CacheKey,
		arg.Data,
		arg.Endpoint,
		arg.ExpiresAt,
	)
	return err
}

const setStaticData = `-- name: SetStaticData :exec
INSERT OR REPLACE INTO tmdb_static_data (data_type, data, last_updated)
VALUES (?, ?, CURRENT_TIMESTAMP)
`

type SetStaticDataParams struct {
	DataType string
	Data     string
}

func (q *Queries) SetStaticData(ctx context.Context, arg SetStaticDataParams) error {
	_, err := q.db.ExecContext(ctx, setStaticData, arg.DataType, arg.Data)
	return err
}
