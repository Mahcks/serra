// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: users.sql

package repository

import (
	"context"
	"database/sql"
)

const createLocalUser = `-- name: CreateLocalUser :one
INSERT INTO users (id, username, email, password_hash, user_type, avatar_url, invited_by, invitation_accepted_at)
VALUES (?, ?, ?, ?, 'local', ?, ?, ?)
RETURNING id, username, access_token, avatar_url, email, user_type, password_hash, invited_by, invitation_accepted_at, created_at, updated_at
`

type CreateLocalUserParams struct {
	ID                   string         `json:"id"`
	Username             string         `json:"username"`
	Email                sql.NullString `json:"email"`
	PasswordHash         sql.NullString `json:"password_hash"`
	AvatarUrl            sql.NullString `json:"avatar_url"`
	InvitedBy            sql.NullString `json:"invited_by"`
	InvitationAcceptedAt sql.NullTime   `json:"invitation_accepted_at"`
}

func (q *Queries) CreateLocalUser(ctx context.Context, arg CreateLocalUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createLocalUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.AvatarUrl,
		arg.InvitedBy,
		arg.InvitationAcceptedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.AvatarUrl,
		&i.Email,
		&i.UserType,
		&i.PasswordHash,
		&i.InvitedBy,
		&i.InvitationAcceptedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, access_token, email, avatar_url, user_type, password_hash)
VALUES (?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
  username = excluded.username,
  access_token = excluded.access_token,
  avatar_url = excluded.avatar_url,
  user_type = excluded.user_type,
  updated_at = CURRENT_TIMESTAMP
RETURNING id, username, access_token, avatar_url, email, user_type, password_hash, invited_by, invitation_accepted_at, created_at, updated_at
`

type CreateUserParams struct {
	ID           string         `json:"id"`
	Username     string         `json:"username"`
	AccessToken  sql.NullString `json:"access_token"`
	Email        sql.NullString `json:"email"`
	AvatarUrl    sql.NullString `json:"avatar_url"`
	UserType     string         `json:"user_type"`
	PasswordHash sql.NullString `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.AccessToken,
		arg.Email,
		arg.AvatarUrl,
		arg.UserType,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.AvatarUrl,
		&i.Email,
		&i.UserType,
		&i.PasswordHash,
		&i.InvitedBy,
		&i.InvitationAcceptedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, avatar_url, user_type, created_at FROM users
`

type GetAllUsersRow struct {
	ID        string         `json:"id"`
	Username  string         `json:"username"`
	Email     sql.NullString `json:"email"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	UserType  string         `json:"user_type"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.AvatarUrl,
			&i.UserType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, access_token, avatar_url, email, user_type, password_hash, invited_by, invitation_accepted_at, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.AvatarUrl,
		&i.Email,
		&i.UserType,
		&i.PasswordHash,
		&i.InvitedBy,
		&i.InvitationAcceptedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, access_token, avatar_url, email, user_type, password_hash, invited_by, invitation_accepted_at, created_at, updated_at FROM users WHERE username = ? AND user_type = 'local'
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.AvatarUrl,
		&i.Email,
		&i.UserType,
		&i.PasswordHash,
		&i.InvitedBy,
		&i.InvitationAcceptedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = ?, email = ?, avatar_url = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ?
`

type UpdateUserParams struct {
	Username  string         `json:"username"`
	Email     sql.NullString `json:"email"`
	AvatarUrl sql.NullString `json:"avatar_url"`
	ID        string         `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.AvatarUrl,
		arg.ID,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password_hash = ?, updated_at = CURRENT_TIMESTAMP 
WHERE id = ? AND user_type = 'local'
`

type UpdateUserPasswordParams struct {
	PasswordHash sql.NullString `json:"password_hash"`
	ID           string         `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	return err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(
  SELECT 1 FROM users WHERE id = ?
)
`

func (q *Queries) UserExists(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, userExists, id)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
