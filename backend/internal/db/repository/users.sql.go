// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: users.sql

package repository

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, access_token, email)
VALUES (?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
  username = excluded.username,
  access_token = excluded.access_token
RETURNING id, username, access_token, email
`

type CreateUserParams struct {
	ID          string
	Username    string
	AccessToken sql.NullString
	Email       sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.AccessToken,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.Email,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email FROM users
`

type GetAllUsersRow struct {
	ID       string
	Username string
	Email    sql.NullString
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, access_token, email FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccessToken,
		&i.Email,
	)
	return i, err
}

const userExists = `-- name: UserExists :one
SELECT EXISTS(
  SELECT 1 FROM users WHERE id = ?
)
`

func (q *Queries) UserExists(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, userExists, id)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
