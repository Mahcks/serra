// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: download_clients.sql

package repository

import (
	"context"
	"database/sql"
)

const getDownloadClients = `-- name: GetDownloadClients :many
SELECT id, type, name, host, port, username, password, api_key, use_ssl, created_at
FROM download_clients
`

func (q *Queries) GetDownloadClients(ctx context.Context) ([]DownloadClient, error) {
	rows, err := q.db.QueryContext(ctx, getDownloadClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DownloadClient
	for rows.Next() {
		var i DownloadClient
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.Host,
			&i.Port,
			&i.Username,
			&i.Password,
			&i.ApiKey,
			&i.UseSsl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertDownloadClient = `-- name: UpsertDownloadClient :exec
INSERT INTO download_clients (id, type, name, host, port, username, password, api_key, use_ssl)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
    type = excluded.type,
    name = excluded.name,
    host = excluded.host,
    port = excluded.port,
    username = excluded.username,
    password = excluded.password,
    api_key = excluded.api_key,
    use_ssl = excluded.use_ssl
`

type UpsertDownloadClientParams struct {
	ID       string
	Type     string
	Name     string
	Host     string
	Port     int64
	Username sql.NullString
	Password sql.NullString
	ApiKey   sql.NullString
	UseSsl   sql.NullBool
}

func (q *Queries) UpsertDownloadClient(ctx context.Context, arg UpsertDownloadClientParams) error {
	_, err := q.db.ExecContext(ctx, upsertDownloadClient,
		arg.ID,
		arg.Type,
		arg.Name,
		arg.Host,
		arg.Port,
		arg.Username,
		arg.Password,
		arg.ApiKey,
		arg.UseSsl,
	)
	return err
}
