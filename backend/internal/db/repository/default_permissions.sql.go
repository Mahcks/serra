// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: default_permissions.sql

package repository

import (
	"context"
)

const ensureDefaultPermissionExists = `-- name: EnsureDefaultPermissionExists :exec
INSERT OR IGNORE INTO default_permissions (permission_id, enabled)
VALUES (?, FALSE)
`

func (q *Queries) EnsureDefaultPermissionExists(ctx context.Context, permissionID string) error {
	_, err := q.db.ExecContext(ctx, ensureDefaultPermissionExists, permissionID)
	return err
}

const getAllDefaultPermissionSettings = `-- name: GetAllDefaultPermissionSettings :many
SELECT permission_id, enabled FROM default_permissions ORDER BY permission_id
`

type GetAllDefaultPermissionSettingsRow struct {
	PermissionID string `json:"permission_id"`
	Enabled      bool   `json:"enabled"`
}

func (q *Queries) GetAllDefaultPermissionSettings(ctx context.Context) ([]GetAllDefaultPermissionSettingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllDefaultPermissionSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDefaultPermissionSettingsRow
	for rows.Next() {
		var i GetAllDefaultPermissionSettingsRow
		if err := rows.Scan(&i.PermissionID, &i.Enabled); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDefaultPermissions = `-- name: GetDefaultPermissions :many
SELECT permission_id, enabled FROM default_permissions WHERE enabled = TRUE
`

type GetDefaultPermissionsRow struct {
	PermissionID string `json:"permission_id"`
	Enabled      bool   `json:"enabled"`
}

func (q *Queries) GetDefaultPermissions(ctx context.Context) ([]GetDefaultPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getDefaultPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDefaultPermissionsRow
	for rows.Next() {
		var i GetDefaultPermissionsRow
		if err := rows.Scan(&i.PermissionID, &i.Enabled); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDefaultPermission = `-- name: RemoveDefaultPermission :exec
DELETE FROM default_permissions WHERE permission_id = ?
`

func (q *Queries) RemoveDefaultPermission(ctx context.Context, permissionID string) error {
	_, err := q.db.ExecContext(ctx, removeDefaultPermission, permissionID)
	return err
}

const updateDefaultPermission = `-- name: UpdateDefaultPermission :exec
INSERT OR REPLACE INTO default_permissions (permission_id, enabled, updated_at)
VALUES (?, ?, CURRENT_TIMESTAMP)
`

type UpdateDefaultPermissionParams struct {
	PermissionID string `json:"permission_id"`
	Enabled      bool   `json:"enabled"`
}

func (q *Queries) UpdateDefaultPermission(ctx context.Context, arg UpdateDefaultPermissionParams) error {
	_, err := q.db.ExecContext(ctx, updateDefaultPermission, arg.PermissionID, arg.Enabled)
	return err
}
