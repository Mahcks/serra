// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: settings.sql

package repository

import (
	"context"
)

const getAllSettings = `-- name: GetAllSettings :many
SELECT key, value FROM settings
`

func (q *Queries) GetAllSettings(ctx context.Context) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, getAllSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Setting
	for rows.Next() {
		var i Setting
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSetting = `-- name: GetSetting :one
SELECT value FROM settings WHERE key = ?
`

func (q *Queries) GetSetting(ctx context.Context, key string) (string, error) {
	row := q.db.QueryRowContext(ctx, getSetting, key)
	var value string
	err := row.Scan(&value)
	return value, err
}

const upsertSetting = `-- name: UpsertSetting :exec
INSERT INTO settings (key, value) 
VALUES (?, ?) 
ON CONFLICT(key) DO UPDATE SET value = excluded.value
`

type UpsertSettingParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) UpsertSetting(ctx context.Context, arg UpsertSettingParams) error {
	_, err := q.db.ExecContext(ctx, upsertSetting, arg.Key, arg.Value)
	return err
}
