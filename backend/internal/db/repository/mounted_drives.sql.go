// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: mounted_drives.sql

package repository

import (
	"context"
	"database/sql"
)

const createMountedDrive = `-- name: CreateMountedDrive :exec
INSERT INTO mounted_drives (
    id, name, mount_path, filesystem, total_size, used_size, 
    available_size, usage_percentage, is_online, last_checked
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateMountedDriveParams struct {
	ID              string
	Name            string
	MountPath       string
	Filesystem      sql.NullString
	TotalSize       sql.NullInt64
	UsedSize        sql.NullInt64
	AvailableSize   sql.NullInt64
	UsagePercentage sql.NullFloat64
	IsOnline        sql.NullBool
	LastChecked     sql.NullTime
}

func (q *Queries) CreateMountedDrive(ctx context.Context, arg CreateMountedDriveParams) error {
	_, err := q.db.ExecContext(ctx, createMountedDrive,
		arg.ID,
		arg.Name,
		arg.MountPath,
		arg.Filesystem,
		arg.TotalSize,
		arg.UsedSize,
		arg.AvailableSize,
		arg.UsagePercentage,
		arg.IsOnline,
		arg.LastChecked,
	)
	return err
}

const deleteMountedDrive = `-- name: DeleteMountedDrive :exec
DELETE FROM mounted_drives WHERE id = ?
`

func (q *Queries) DeleteMountedDrive(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMountedDrive, id)
	return err
}

const getMountedDrive = `-- name: GetMountedDrive :one
SELECT id, name, mount_path, filesystem, total_size, used_size, available_size, usage_percentage, is_online, last_checked, created_at, updated_at FROM mounted_drives WHERE id = ?
`

func (q *Queries) GetMountedDrive(ctx context.Context, id string) (MountedDrife, error) {
	row := q.db.QueryRowContext(ctx, getMountedDrive, id)
	var i MountedDrife
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MountPath,
		&i.Filesystem,
		&i.TotalSize,
		&i.UsedSize,
		&i.AvailableSize,
		&i.UsagePercentage,
		&i.IsOnline,
		&i.LastChecked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMountedDriveByPath = `-- name: GetMountedDriveByPath :one
SELECT id, name, mount_path, filesystem, total_size, used_size, available_size, usage_percentage, is_online, last_checked, created_at, updated_at FROM mounted_drives WHERE mount_path = ?
`

func (q *Queries) GetMountedDriveByPath(ctx context.Context, mountPath string) (MountedDrife, error) {
	row := q.db.QueryRowContext(ctx, getMountedDriveByPath, mountPath)
	var i MountedDrife
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MountPath,
		&i.Filesystem,
		&i.TotalSize,
		&i.UsedSize,
		&i.AvailableSize,
		&i.UsagePercentage,
		&i.IsOnline,
		&i.LastChecked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMountedDrivesForPolling = `-- name: GetMountedDrivesForPolling :many
SELECT id, name, mount_path, filesystem, total_size, used_size, available_size, usage_percentage, is_online, last_checked, created_at, updated_at FROM mounted_drives WHERE is_online = TRUE
`

func (q *Queries) GetMountedDrivesForPolling(ctx context.Context) ([]MountedDrife, error) {
	rows, err := q.db.QueryContext(ctx, getMountedDrivesForPolling)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MountedDrife
	for rows.Next() {
		var i MountedDrife
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MountPath,
			&i.Filesystem,
			&i.TotalSize,
			&i.UsedSize,
			&i.AvailableSize,
			&i.UsagePercentage,
			&i.IsOnline,
			&i.LastChecked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMountedDrives = `-- name: ListMountedDrives :many
SELECT id, name, mount_path, filesystem, total_size, used_size, available_size, usage_percentage, is_online, last_checked, created_at, updated_at FROM mounted_drives ORDER BY name
`

func (q *Queries) ListMountedDrives(ctx context.Context) ([]MountedDrife, error) {
	rows, err := q.db.QueryContext(ctx, listMountedDrives)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MountedDrife
	for rows.Next() {
		var i MountedDrife
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MountPath,
			&i.Filesystem,
			&i.TotalSize,
			&i.UsedSize,
			&i.AvailableSize,
			&i.UsagePercentage,
			&i.IsOnline,
			&i.LastChecked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMountedDrive = `-- name: UpdateMountedDrive :exec
UPDATE mounted_drives SET
    name = ?,
    mount_path = ?,
    filesystem = ?,
    total_size = ?,
    used_size = ?,
    available_size = ?,
    usage_percentage = ?,
    is_online = ?,
    last_checked = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateMountedDriveParams struct {
	Name            string
	MountPath       string
	Filesystem      sql.NullString
	TotalSize       sql.NullInt64
	UsedSize        sql.NullInt64
	AvailableSize   sql.NullInt64
	UsagePercentage sql.NullFloat64
	IsOnline        sql.NullBool
	LastChecked     sql.NullTime
	ID              string
}

func (q *Queries) UpdateMountedDrive(ctx context.Context, arg UpdateMountedDriveParams) error {
	_, err := q.db.ExecContext(ctx, updateMountedDrive,
		arg.Name,
		arg.MountPath,
		arg.Filesystem,
		arg.TotalSize,
		arg.UsedSize,
		arg.AvailableSize,
		arg.UsagePercentage,
		arg.IsOnline,
		arg.LastChecked,
		arg.ID,
	)
	return err
}

const updateMountedDriveStats = `-- name: UpdateMountedDriveStats :exec
UPDATE mounted_drives SET
    total_size = ?,
    used_size = ?,
    available_size = ?,
    usage_percentage = ?,
    is_online = ?,
    last_checked = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateMountedDriveStatsParams struct {
	TotalSize       sql.NullInt64
	UsedSize        sql.NullInt64
	AvailableSize   sql.NullInt64
	UsagePercentage sql.NullFloat64
	IsOnline        sql.NullBool
	LastChecked     sql.NullTime
	ID              string
}

func (q *Queries) UpdateMountedDriveStats(ctx context.Context, arg UpdateMountedDriveStatsParams) error {
	_, err := q.db.ExecContext(ctx, updateMountedDriveStats,
		arg.TotalSize,
		arg.UsedSize,
		arg.AvailableSize,
		arg.UsagePercentage,
		arg.IsOnline,
		arg.LastChecked,
		arg.ID,
	)
	return err
}
