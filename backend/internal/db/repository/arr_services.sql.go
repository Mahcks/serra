// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: arr_services.sql

package repository

import (
	"context"
	"database/sql"
)

const createArrService = `-- name: CreateArrService :exec
INSERT INTO arr_services (id, type, name, base_url, api_key, quality_profile, root_folder_path, minimum_availability, is_4k)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateArrServiceParams struct {
	ID                  string
	Type                string
	Name                string
	BaseUrl             string
	ApiKey              string
	QualityProfile      string
	RootFolderPath      string
	MinimumAvailability string
	Is4k                bool
}

func (q *Queries) CreateArrService(ctx context.Context, arg CreateArrServiceParams) error {
	_, err := q.db.ExecContext(ctx, createArrService,
		arg.ID,
		arg.Type,
		arg.Name,
		arg.BaseUrl,
		arg.ApiKey,
		arg.QualityProfile,
		arg.RootFolderPath,
		arg.MinimumAvailability,
		arg.Is4k,
	)
	return err
}

const getArrServiceByType = `-- name: GetArrServiceByType :many
SELECT id, type, name, base_url, api_key, quality_profile, root_folder_path, minimum_availability, is_4k, created_at
FROM arr_services
WHERE type = ?
`

type GetArrServiceByTypeRow struct {
	ID                  string
	Type                string
	Name                string
	BaseUrl             string
	ApiKey              string
	QualityProfile      string
	RootFolderPath      string
	MinimumAvailability string
	Is4k                bool
	CreatedAt           sql.NullTime
}

func (q *Queries) GetArrServiceByType(ctx context.Context, arrtype string) ([]GetArrServiceByTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getArrServiceByType, arrtype)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetArrServiceByTypeRow
	for rows.Next() {
		var i GetArrServiceByTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Name,
			&i.BaseUrl,
			&i.ApiKey,
			&i.QualityProfile,
			&i.RootFolderPath,
			&i.MinimumAvailability,
			&i.Is4k,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
