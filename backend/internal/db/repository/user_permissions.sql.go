// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: user_permissions.sql

package repository

import (
	"context"
	"database/sql"
)

const assignUserPermission = `-- name: AssignUserPermission :exec
INSERT INTO user_permissions (user_id, permission_id)
VALUES (?1, ?2)
ON CONFLICT (user_id, permission_id) DO NOTHING
`

type AssignUserPermissionParams struct {
	UserID       string `json:"user_id"`
	PermissionID string `json:"permission_id"`
}

func (q *Queries) AssignUserPermission(ctx context.Context, arg AssignUserPermissionParams) error {
	_, err := q.db.ExecContext(ctx, assignUserPermission, arg.UserID, arg.PermissionID)
	return err
}

const checkUserPermission = `-- name: CheckUserPermission :one
SELECT COUNT(*) > 0 as has_permission
FROM user_permissions
WHERE user_id = ?1 AND permission_id = ?2
`

type CheckUserPermissionParams struct {
	UserID       string `json:"user_id"`
	PermissionID string `json:"permission_id"`
}

func (q *Queries) CheckUserPermission(ctx context.Context, arg CheckUserPermissionParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserPermission, arg.UserID, arg.PermissionID)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const deleteUserPermissions = `-- name: DeleteUserPermissions :exec
DELETE FROM user_permissions WHERE user_id = ?1
`

func (q *Queries) DeleteUserPermissions(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUserPermissions, userID)
	return err
}

const getAllUserPermissions = `-- name: GetAllUserPermissions :many
SELECT up.user_id, up.permission_id, u.username, p.name, p.description
FROM user_permissions up
JOIN users u ON up.user_id = u.id
JOIN permissions p ON up.permission_id = p.id
ORDER BY u.username, p.name
`

type GetAllUserPermissionsRow struct {
	UserID       string         `json:"user_id"`
	PermissionID string         `json:"permission_id"`
	Username     string         `json:"username"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
}

func (q *Queries) GetAllUserPermissions(ctx context.Context) ([]GetAllUserPermissionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserPermissionsRow
	for rows.Next() {
		var i GetAllUserPermissionsRow
		if err := rows.Scan(
			&i.UserID,
			&i.PermissionID,
			&i.Username,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT user_id, permission_id
FROM user_permissions
WHERE user_id = ?1
`

func (q *Queries) GetUserPermissions(ctx context.Context, userID string) ([]UserPermission, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPermission
	for rows.Next() {
		var i UserPermission
		if err := rows.Scan(&i.UserID, &i.PermissionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissionsWithDetails = `-- name: GetUserPermissionsWithDetails :many
SELECT up.user_id, up.permission_id, p.name, p.description
FROM user_permissions up
JOIN permissions p ON up.permission_id = p.id
WHERE up.user_id = ?1
`

type GetUserPermissionsWithDetailsRow struct {
	UserID       string         `json:"user_id"`
	PermissionID string         `json:"permission_id"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
}

func (q *Queries) GetUserPermissionsWithDetails(ctx context.Context, userID string) ([]GetUserPermissionsWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPermissionsWithDetails, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPermissionsWithDetailsRow
	for rows.Next() {
		var i GetUserPermissionsWithDetailsRow
		if err := rows.Scan(
			&i.UserID,
			&i.PermissionID,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeUserPermission = `-- name: RevokeUserPermission :exec
DELETE FROM user_permissions
WHERE user_id = ?1 AND permission_id = ?2
`

type RevokeUserPermissionParams struct {
	UserID       string `json:"user_id"`
	PermissionID string `json:"permission_id"`
}

func (q *Queries) RevokeUserPermission(ctx context.Context, arg RevokeUserPermissionParams) error {
	_, err := q.db.ExecContext(ctx, revokeUserPermission, arg.UserID, arg.PermissionID)
	return err
}
