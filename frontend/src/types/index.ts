// Code generated by tygo. DO NOT EDIT.
// Auto-generated by tygo. Do not edit manually.
//////////
// source: account.go

export interface User {
  id: string;
  username: string;
  access_token: string;
  is_admin: boolean;
}
export interface LocalUser {
  id: string;
  username: string;
  email?: string;
}

//////////
// source: calendar.go

export interface CalendarItem {
  title: string;
  source: ArrProvider; // "radarr" or "sonarr"
  releaseDate: string /* RFC3339 */;
}

//////////
// source: provider.go

export type Provider = string;
export const ProviderEmby: Provider = "emby";
export const ProviderJellyfin: Provider = "jellyfin";
export type ArrProvider = string;
export const ProviderRadarr: ArrProvider = "radarr";
export const ProviderSonarr: ArrProvider = "sonarr";

//////////
// source: radarr.go

export interface RadarrQualityProfile {
  id: number /* int */;
  name: string;
  upgrade_allowed: boolean;
  cutoff: number /* int */;
  items: RadarrQualityProfileItem[];
  min_format_score: number /* int */;
  cutoff_format_score: number /* int */;
  min_upgrade_format_score: number /* int */;
  format_items: RadarrFormatItem[];
  language: RadarrLanguage;
}
export interface RadarrQualityProfileItem {
  quality: RadarrQuality;
  items: RadarrQualityProfileItem[];
  allowed: boolean;
  name?: string; // Only present for grouped items
  id?: number /* int */; // Only present for grouped items
}
export interface RadarrQuality {
  id: number /* int */;
  name: string;
  source: string;
  resolution: number /* int */;
  modifier: string;
}
export interface RadarrFormatItem {
  format: number /* int */;
  name: string;
  score: number /* int */;
}
export interface RadarrLanguage {
  id: number /* int */;
  name: string;
}
export interface RadarrRootFolder {
  path: string;
  accessible: boolean;
  free_space: number /* int64 */;
  unmapped_folders?: RadarrUnmappedFolder[];
}
export interface RadarrUnmappedFolder {
  name: string;
  path: string;
  relative_path: string;
}

//////////
// source: respond.go

export interface APIErrorResponseBodyError {
  status_code: number /* int */;
  timestamp: number /* int */;
  error: APIError;
  trace_id?: string;
}
export interface APIError {
  status_code: number /* int */;
  message: string;
  error_code: number /* int */;
  details?: { [key: string]: any};
}

//////////
// source: settings.go

export type Setting = string;
export type RequestSystem = string;
/**
 * RequestSystemBuiltIn uses Serra's built-in request system
 */
export const RequestSystemBuiltIn: RequestSystem = "built_in";
/**
 * RequestSystemExternal uses an external request system (like Jellyseerr) in an iframe
 */
export const RequestSystemExternal: RequestSystem = "external";
/**
 * SettingSetupComplete indicates that the initial setup has been completed.
 */
export const SettingSetupComplete: Setting = "setup_complete";
/**
 * SettingMediaServerType indicates the type of media server being used. Either "emby" or "jellyfin".
 */
export const SettingMediaServerType: Setting = "media_server_type";
/**
 * SettingMediaServerURL indicates the URL of the media server.
 */
export const SettingMediaServerURL: Setting = "media_server_url";
/**
 * SettingMediaServerAPIKey indicates the API key for the media server.
 */
export const SettingMediaServerAPIKey: Setting = "media_server_api_key";
/**
 * SettingRequestSystem indicates whether to use built-in request system or external system (like Jellyseerr)
 */
export const SettingRequestSystem: Setting = "request_system";
/**
 * SettingRequestSystemURL indicates the URL of the external request system (e.g., Jellyseerr)
 */
export const SettingRequestSystemURL: Setting = "request_system_url";

//////////
// source: sonarr.go

export interface SonarrQualityProfile {
  id: number /* int */;
  name: string;
  upgrade_allowed: boolean;
  cutoff: number /* int */;
  items: SonarrQualityProfileItem[];
  min_format_score: number /* int */;
  cutoff_format_score: number /* int */;
  min_upgrade_format_score: number /* int */;
  format_items: SonarrFormatItem[];
  language: SonarrLanguage;
}
export interface SonarrQualityProfileItem {
  quality: SonarrQuality;
  items: SonarrQualityProfileItem[];
  allowed: boolean;
  name?: string; // Only present for grouped items
  id?: number /* int */; // Only present for grouped items
}
export interface SonarrQuality {
  id: number /* int */;
  name: string;
  source: string;
  resolution: number /* int */;
  modifier: string;
}
export interface SonarrFormatItem {
  format: number /* int */;
  name: string;
  score: number /* int */;
}
export interface SonarrLanguage {
  id: number /* int */;
  name: string;
}
export interface SonarrRootFolder {
  path: string;
  accessible: boolean;
  free_space: number /* int64 */;
  unmapped_folders?: SonarrUnmappedFolder[];
}
export interface SonarrUnmappedFolder {
  name: string;
  path: string;
  relative_path: string;
}
