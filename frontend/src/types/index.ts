// Code generated by tygo. DO NOT EDIT.
// Auto-generated by tygo. Do not edit manually.
//////////
// source: account.go

export interface User {
  id: string;
  username: string;
  access_token: string;
  is_admin: boolean;
}
export interface LocalUser {
  id: string;
  username: string;
  email?: string;
}

//////////
// source: calendar.go

export interface CalendarItem {
  title: string;
  source: ArrProvider; // "radarr" or "sonarr"
  releaseDate: string /* RFC3339 */;
}

//////////
// source: downloads.go

export interface Download {
  id: string;
  title: string;
  torrent_title: string;
  source: string;
  tmdb_id?: number /* int64 */;
  tvdb_id?: number /* int64 */;
  hash?: string;
  progress: number /* float64 */;
  time_left?: string;
  status?: string;
  update_at?: string;
}

//////////
// source: jellystat.go

export interface JellystatLibrary {
  id: string;
  name: string;
  collection_type: string;
  library_count: number /* int */;
  season_count: number /* int */;
  episode_count: number /* int */;
}
export interface JellystatUserActivity {
  user_id: string;
  user_name: string;
  total_plays: number /* int */;
  total_watch_time: number /* int */;
}

//////////
// source: provider.go

export type Provider = string;
export const ProviderEmby: Provider = "emby";
export const ProviderJellyfin: Provider = "jellyfin";
export type ArrProvider = string;
export const ProviderRadarr: ArrProvider = "radarr";
export const ProviderSonarr: ArrProvider = "sonarr";

//////////
// source: radarr.go

export interface RadarrQualityProfile {
  id: number /* int */;
  name: string;
  upgrade_allowed: boolean;
  cutoff: number /* int */;
  items: RadarrQualityProfileItem[];
  min_format_score: number /* int */;
  cutoff_format_score: number /* int */;
  min_upgrade_format_score: number /* int */;
  format_items: RadarrFormatItem[];
  language: RadarrLanguage;
}
export interface RadarrQualityProfileItem {
  quality: RadarrQuality;
  items: RadarrQualityProfileItem[];
  allowed: boolean;
  name?: string; // Only present for grouped items
  id?: number /* int */; // Only present for grouped items
}
export interface RadarrQuality {
  id: number /* int */;
  name: string;
  source: string;
  resolution: number /* int */;
  modifier: string;
}
export interface RadarrFormatItem {
  format: number /* int */;
  name: string;
  score: number /* int */;
}
export interface RadarrLanguage {
  id: number /* int */;
  name: string;
}
export interface RadarrRootFolder {
  path: string;
  accessible: boolean;
  free_space: number /* int64 */;
  unmapped_folders?: RadarrUnmappedFolder[];
}
export interface RadarrUnmappedFolder {
  name: string;
  path: string;
  relative_path: string;
}

//////////
// source: respond.go

export interface APIErrorResponseBodyError {
  status_code: number /* int */;
  timestamp: number /* int */;
  error: APIError;
  trace_id?: string;
}
export interface APIError {
  status_code: number /* int */;
  message: string;
  error_code: number /* int */;
  details?: { [key: string]: any};
}

//////////
// source: settings.go

export type Setting = string;
export type RequestSystem = string;
/**
 * RequestSystemBuiltIn uses Serra's built-in request system
 */
export const RequestSystemBuiltIn: RequestSystem = "built_in";
/**
 * RequestSystemExternal uses an external request system (like Jellyseerr) in an iframe
 */
export const RequestSystemExternal: RequestSystem = "external";
/**
 * SettingSetupComplete indicates that the initial setup has been completed.
 */
export const SettingSetupComplete: Setting = "setup_complete";
/**
 * SettingMediaServerType indicates the type of media server being used. Either "emby" or "jellyfin".
 */
export const SettingMediaServerType: Setting = "media_server_type";
/**
 * SettingMediaServerURL indicates the URL of the media server.
 */
export const SettingMediaServerURL: Setting = "media_server_url";
/**
 * SettingMediaServerAPIKey indicates the API key for the media server.
 */
export const SettingMediaServerAPIKey: Setting = "media_server_api_key";
/**
 * SettingRequestSystem indicates whether to use built-in request system or external system (like Jellyseerr)
 */
export const SettingRequestSystem: Setting = "request_system";
/**
 * SettingRequestSystemURL indicates the URL of the external request system (e.g., Jellyseerr)
 */
export const SettingRequestSystemURL: Setting = "request_system_url";
/**
 * SettingJellystatURL indicates the URL of the Jellystat service.
 */
export const SettingJellystatURL: Setting = "jellystat_url";
/**
 * SettingJellystatAPIKey indicates the API key for the Jellystat service.
 */
export const SettingJellystatAPIKey: Setting = "jellystat_api_key";

//////////
// source: sonarr.go

export interface SonarrQualityProfile {
  id: number /* int */;
  name: string;
  upgrade_allowed: boolean;
  cutoff: number /* int */;
  items: SonarrQualityProfileItem[];
  min_format_score: number /* int */;
  cutoff_format_score: number /* int */;
  min_upgrade_format_score: number /* int */;
  format_items: SonarrFormatItem[];
  language: SonarrLanguage;
}
export interface SonarrQualityProfileItem {
  quality: SonarrQuality;
  items: SonarrQualityProfileItem[];
  allowed: boolean;
  name?: string; // Only present for grouped items
  id?: number /* int */; // Only present for grouped items
}
export interface SonarrQuality {
  id: number /* int */;
  name: string;
  source: string;
  resolution: number /* int */;
  modifier: string;
}
export interface SonarrFormatItem {
  format: number /* int */;
  name: string;
  score: number /* int */;
}
export interface SonarrLanguage {
  id: number /* int */;
  name: string;
}
export interface SonarrRootFolder {
  path: string;
  accessible: boolean;
  free_space: number /* int64 */;
  unmapped_folders?: SonarrUnmappedFolder[];
}
export interface SonarrUnmappedFolder {
  name: string;
  path: string;
  relative_path: string;
}

//////////
// source: websocket.go

export type Opcode = number /* uint8 */;
export const OpcodeDispatch: Opcode = 0; // Server sends event
export const OpcodeHello: Opcode = 1; // Server greets client
export const OpcodeHeartbeat: Opcode = 2; // Server/client keepalive
export const OpcodeReconnect: Opcode = 3; // Server requests reconnect
export const OpcodeAck: Opcode = 4; // Server acknowledges action
export const OpcodeError: Opcode = 5; // Server sends error
export const OpcodeDownloadProgress: Opcode = 10; // Server sends download progress
export const OpcodeDownloadRemoved: Opcode = 11; // Server notifies download removal
export const OpcodeDownloadProgressBatch: Opcode = 12; // Server sends batch download progress
export const OpcodeSystemStatus: Opcode = 13; // Server sends system status
export const OpcodeUserActivity: Opcode = 14; // Server sends user activity updates
export interface Message {
  op: Opcode; // Operation type
  t: number /* int64 */; // Millisecond timestamp
  d: any; // Any payload
  s?: number /* uint64 */; // Optional sequence number
}
/**
 * HelloPayload is sent when a client connects
 */
export interface HelloPayload {
  message: string;
  server_id?: string;
  features?: string[];
  metadata?: { [key: string]: string};
}
/**
 * ErrorPayload represents an error message
 */
export interface ErrorPayload {
  message: string;
  code?: string;
  request_id?: string;
}
/**
 * DownloadProgressPayload represents download progress
 */
export interface DownloadProgressPayload {
  id: string;
  title: string;
  torrent_title: string;
  source: string;
  tmdb_id?: number /* int64 */; // Optional TMDB ID
  tvdb_id?: number /* int64 */; // Optional TVDB ID
  hash: string;
  progress: number /* float64 */; // 0-100
  time_left: string;
  status: string;
  last_updated: string;
}
/**
 * DownloadRemovedPayload represents a removed download
 */
export interface DownloadRemovedPayload {
  download_id: string;
  reason?: string;
}
/**
 * DownloadProgressBatchPayload represents multiple download updates
 */
export interface DownloadProgressBatchPayload {
  downloads: DownloadProgressPayload[];
  count: number /* int */;
  timestamp: number /* int64 */;
}
/**
 * SystemStatusPayload represents system status information
 */
export interface SystemStatusPayload {
  status: string; // "online", "maintenance", "error"
  uptime: number /* int64 */; // Server uptime in seconds
  connections: number /* int */; // Active WebSocket connections
  load?: { [key: string]: string}; // System load information
  memory?: { [key: string]: number /* int64 */}; // Memory usage
  disk?: { [key: string]: number /* int64 */}; // Disk usage
}
/**
 * UserActivityPayload represents user activity updates
 */
export interface UserActivityPayload {
  user_id: string;
  username: string;
  activity: string; // "login", "logout", "download_start", etc.
  timestamp: number /* int64 */;
  metadata?: { [key: string]: any};
}
